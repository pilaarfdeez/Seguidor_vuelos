name: Run Explorer

on:
  push:
    branches:
      - explore-flights
  # schedule:
  #   - cron: "0 18 * * *" # Run daily at 18:00 UTC
  workflow_dispatch:


jobs:
  build:
    runs-on: ubuntu-latest  # Wir verwenden ein Ubuntu-Image

    steps:
      # Schritt 1: Checkout des Codes
      - name: Checkout repository
        uses: actions/checkout@v4
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}

      # Schritt 2: Setze Python und installiere Abh채ngigkeiten
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Schritt 3: Installiere Abh채ngigkeiten
      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      # Schritt 4: Setze Google Chrome und ChromeDriver f체r Headless-Betrieb
      - name: Set up Chrome & ChromeDriver
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          google-chrome --version
          CHROME_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+' | head -1)
          echo "CHROME_VERSION: $CHROME_VERSION"
          CHROMEDRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/latest-patch-versions-per-build.json" | jq -r ".builds[\"$CHROME_VERSION\"].version")
          echo "CHROMEDRIVER_VERSION: $CHROMEDRIVER_VERSION"
          wget -v -O chromedriver.zip "https://storage.googleapis.com/chrome-for-testing-public/$CHROMEDRIVER_VERSION/linux64/chromedriver-linux64.zip"
          ls -l chromedriver.zip
          unzip chromedriver.zip
          sudo mv chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
          sudo chmod +x /usr/local/bin/chromedriver
          google-chrome --version
          chromedriver --version

      # Schritt 5: F체hre das Scraper-Skript aus
      - name: Run Explorer script
        run: |
          mkdir -p data/images
          python run_explorer.py
        env:
          ENV: production
          GMAIL_LOGIN: ${{ secrets.GMAIL_LOGIN }}
          GMAIL_PASSWORD: ${{ secrets.GMAIL_PASSWORD }}
          GMAIL_TO: ${{ secrets.GMAIL_TO }}

      # Schritt 6: Push die aktualisierte JSON-Datei
      - name: Commit JSON changes
        uses: EndBug/add-and-commit@v9
        with:
          add: ./data/potential_destinations.json
          message: "Update potential destinations"

